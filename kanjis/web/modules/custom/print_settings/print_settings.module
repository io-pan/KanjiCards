<?php
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

function print_settings_page_attachments(array &$page) {
  // $routeName = \Drupal::routeMatch()->getRouteName();
  // if (!in_array($routeName, [
  // 	'layout_builder.overrides.node.view', 
  // 	'layout_builder.defaults.node.view'
  // 	])) {
  //   $page['#attached']['library'] = array_diff($page['#attached']['library'], ['contextual/drupal.contextual-links', 'contextual/drupal.contextual-toolbar']);
  // }
}


// Avant l’exécution de la requête SQL
function print_settings_views_pre_view(ViewExecutable $view, $display_id, array &$args, \Drupal\Core\Routing\RouteMatchInterface $route_match = NULL) {

  if ($view->id() === 'cards') {
    $form = \Drupal::formBuilder()->getForm('\Drupal\print_settings\Form\PrintSettingsSelectForm');
    $view->attachment_before[] = [
      '#markup' => \Drupal::service('renderer')->render($form),
    ];
  }
}

// Après la requête
// function print_settings_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
//   die('2');
//   if (in_array($entity->getEntityTypeId(), ['taxonomy_term'])) {
//     unset($build['#contextual_links']);
//   }
// }

// Juste avant le rendu HTML final.
function print_settings_preprocess_views_view_list(&$variables) {

  $view = $variables['view'];
  if ($view->id() === 'cards') {
    
    // $settings = \Drupal::config('print.settings');
    $session = \Drupal::request()->getSession();
    if ($imprimante = $session->get('imprimante_selectionnee')) {
      $settings = \Drupal::entityTypeManager()
        ->getStorage('print_settings')
        ->load($imprimante);

      $variables['orientation'] = $settings->get('cardLandscape')
                                  ? 'orientation-paysage'
                                  : 'orientation-portrait';

      $variables['#attached']['drupalSettings']['printSettings'] = [
        'pageH' => $settings->get('pageH'),
        'pageW' => $settings->get('pageW'),
        'marginT' => $settings->get('marginT'),
        'marginB' => $settings->get('marginB'),
        'marginW' => $settings->get('marginW'),
        'versoOffsetY' => $settings->get('versoOffsetY'),
        'versoOffsetX' => $settings->get('versoOffsetX'),
        'cardH' => $settings->get('cardH'),
        'cardW' => $settings->get('cardW'),
        'cardLandscape' => $settings->get('cardLandscape'),
        'cardFold' => $settings->get('cardFold'),
        'traitCoupe' => $settings->get('traitCoupe')
      ];
      $variables['#cache']['tags'] = $settings->getCacheTags();
    }
  }
}


/* Devrait être dans un autre module */
/**
 * Implements hook_entity_presave().
 */
function print_settings_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  \Drupal::logger('radicaux')->info( 'print_settings_entity_presave -> ' . $entity->id());
/*
  switch ($entity->bundle()) {
    // Here you modify only your day content type
    case 'jukugo':
      \Drupal::logger('radicaux')->info( ' -> jukugo ' );

      if (count($entity->get('field_kanji_ref'))==0) {
      
\Drupal::logger('radicaux')->info( ' kanji count -> ' . count($entity->get('field_kanji_ref')));

      // Lecture du champ 'title'
        $title = $entity->label(); // équivalent à getTitle()

        // Décompose chaque caractère (UTF-8 safe)
        $chars = preg_split('//u', $title, -1, PREG_SPLIT_NO_EMPTY);

        // Prépare la liste des références
        $refs = [];

        foreach ($chars as $kanji_char) {
          // Recherche un node de type 'kanji' dont le titre correspond au caractère
          $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
          $nids = $query
            ->condition('type', 'kanji')
            ->accessCheck(FALSE)
            ->condition('title', $kanji_char)
            ->range(0, 1)
            ->execute();
\Drupal::logger('radicaux')->info( ' kanji count -> ' . count($nids));
          if (!empty($nids)) {
            $kanji_node = \Drupal\node\Entity\Node::load(reset($nids));
            if ($kanji_node) {
              $refs[] = ['target_id' => $kanji_node->id()];
            }
          }
        }

        // Mise à jour du champ 'kanji_ref'
        $entity->set('field_kanji_ref', $refs);
      }
     break;
  }
  */
}